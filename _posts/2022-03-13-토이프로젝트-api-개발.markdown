---
layout: post
title:  "토이 프로젝트 api 개발"
categories: springboot
--- 
### Table: user, address, board, community, notice.

## mapper:
```xml
address.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_practice.repository.AddressRepository">
    <select id="getAddressList" resultType="com.example.springboot_practice.domain.Address">
        SELECT
            id,
            address1,
            address2
        FROM address
    </select>
    <select id="getAddress" resultType="com.example.springboot_practice.domain.Address">
        SELECT
            id,
            address1,
            address2
        FROM address where id =#{userId}
    </select>
</mapper>
```
```xml
board.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_practice.repository.BoardRepository">
    <select id="getList" resultType="com.example.springboot_practice.domain.Board">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents,
            board_type
        FROM board
    </select>
    <select id="getUserBoardData" resultType="com.example.springboot_practice.domain.Board">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents,
            board_type
        FROM board where publisher = #{userId}
    </select>
    <select id="getBoardData" resultType="com.example.springboot_practice.domain.Board">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents,
            board_type
        FROM board where id = #{boardId}
    </select>
    <select id="getListByType" resultType="com.example.springboot_practice.domain.Board">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents,
            board_type
        FROM board where board_type = #{boardType}
    </select>
</mapper>
```
```xml
community.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_practice.repository.CommunityRepository">
    <select id="getCommunityList" resultType="com.example.springboot_practice.domain.Community">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents
        FROM community
    </select>
    <select id="getCommunityData" resultType="com.example.springboot_practice.domain.Community">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents
        FROM community where id = #{communityId}
    </select>

</mapper>
```
```xml
notice.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_practice.repository.NoticeRepository">
    <select id="getNoticeList" resultType="com.example.springboot_practice.domain.Notice">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents
        FROM notice
    </select>
    <select id="getNoticeData" resultType="com.example.springboot_practice.domain.Notice">
        SELECT
            id,
            title,
            regdate,
            publisher,
            contents
        FROM notice where id = #{noticeId}
    </select>
</mapper>
```
```xml
user.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_practice.repository.UserRepository">
    <select id="getList" resultType="com.example.springboot_practice.domain.User">
        SELECT
            id,
            name,
            phone_number,
            address,
            birthday,
            age,
            type,
            is_use,
            regdate,
            student_id,
            identification,
            password
        FROM user
    </select>

    <select id="getData" resultType="com.example.springboot_practice.domain.User">
        SELECT
            id,
            name,
            phone_number,
            address,
            birthday,
            age,
            type,
            is_use,
            regdate,
            is_teacher,
            student_id,
            identification,
            password
        FROM user
        WHERE id = #{userId}
    </select>

</mapper>
```

## Repository:

```java
AddressRepository.java


package com.example.springboot_practice.repository;

import com.example.springboot_practice.domain.Address;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface AddressRepository {
    List<Address> getAddressList();

    Address getAddress(Long userId);
}

```
```java
BoardRepository.java

package com.example.springboot_practice.repository;

import com.example.springboot_practice.domain.Board;
import com.example.springboot_practice.dto.UserBoardDataResponseDto;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface BoardRepository {
    List<Board> getList();

    List<Board> getUserBoardData(Long userId); //service에서 Boarddata를 가져오는 용도로 사용

    Board getBoardData(Long id);

    List<Board> getListByType(String boardType);
}

```
```java
CommunityRepository.java

package com.example.springboot_practice.repository;

import com.example.springboot_practice.domain.Community;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface CommunityRepository {
    List<Community> getCommunityList();
    Community getCommunityData(Long communityId);
}

```
```java
NoticeRepository.java

package com.example.springboot_practice.repository;

import com.example.springboot_practice.domain.Notice;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface NoticeRepository {
    List<Notice> getNoticeList();
    Notice getNoticeData(Long noticeId);

}

```
```java
UserRepository.java

package com.example.springboot_practice.repository;

import com.example.springboot_practice.domain.User;
import org.apache.ibatis.annotations.Mapper;


import java.util.List;

@Mapper
public interface UserRepository {
    List<User> getList();

    User getData(Long userId);
}

```

## domain:
```java
Address.java

package com.example.springboot_practice.domain;

import lombok.Data;

@Data
public class Address {
    private Long id;
    private String address1;
    private String address2;
}

```
```java
Board.java

package com.example.springboot_practice.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;

import java.time.LocalDate;

@Data
public class Board {
    private Long id;
    private String title;
    private Long publisher;
    private String contents;
    @JsonFormat(pattern="yyyy-MM-dd")
    private LocalDate regDate;
    private String board_type;
}

```
```java
Community.java 

package com.example.springboot_practice.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;

import java.time.LocalDate;

@Data
public class Community {
        private Long id;
        private String title;
        private Long publisher;
        private String contents;
        @JsonFormat(pattern="yyyy-MM-dd")
        private LocalDate regDate;

}

```
```java
Notice.java

package com.example.springboot_practice.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;

import java.time.LocalDate;
import java.time.LocalDateTime;

@Data
public class Notice {
    private Long id;
    private String title;
    private Long publisher;
    private String contents;
    @JsonFormat(pattern="yyyy-MM-dd HH:mm:ss")
    private LocalDateTime regDate;
}

```
```java
User.java

package com.example.springboot_practice.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class User {

    private Long id;
    private String name;
    private int age;
    private String birthday;
    private String phone_number;
    private Long address;
    private String type;
    private int is_use;
    private int is_teacher;
    private String student_id;
    private String password;
    private String identification;

    @JsonFormat(pattern="yyyy-MM-dd HH:mm:ss")
    private LocalDateTime regDate;
}

```

## Service:
``` java
AddressService.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.Address;
import com.example.springboot_practice.repository.AddressRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class AddressService {
    private final AddressRepository addressRepository;
    public List<Address> getAddressList(){
        return addressRepository.getAddressList();
    }
    public Address getAddress(Long userId){
        return addressRepository.getAddress(userId);
    }
}

```
``` java
ApiService.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.User;
import com.example.springboot_practice.dto.UserBoardDataResponseDto;
import com.example.springboot_practice.repository.BoardRepository;
import com.example.springboot_practice.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class ApiService {
    private final BoardRepository boardRepository;
    private final UserRepository userRepository;

    public UserBoardDataResponseDto getUserBoardData(Long userId) {
        UserBoardDataResponseDto dto = new UserBoardDataResponseDto();

        User userData = userRepository.getData(userId);

        dto.setUserId(userData.getId());            //userRepository에서 Id를 가져온(get) 후, dto의 userId에 저장(set)한다.
        dto.setAddress(userData.getAddress());      //userRepository에서 Address를 가져온(get) 후, dto의 Address에 저장(set)한다.
        dto.setAge(userData.getAge());              //userRepository에서 Age를 가져온(get) 후, dto의 Age에 저장(set)한다.
        dto.setName(userData.getName());            //userRepository에서 Name을 가져온(get) 후, dto의 Name에 저장(set)한다.
        dto.setBoardData(boardRepository.getUserBoardData(userData.getId()));           //boardRepository의 boardData를 dto에 저장한다.

        return dto;         //dto 출력(userId, Address, Age, Name, boardData)
    }
}

```
``` java
BoardService.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.Board;
import com.example.springboot_practice.repository.BoardRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class BoardService {
    private final BoardRepository boardRepository;

    public List<Board> getList() {
        return boardRepository.getList();
    }

    public Board getBoardData(Long boardId) {
        return boardRepository.getBoardData(boardId);
    }

    public List<Board> getListByType(String type) { return boardRepository.getListByType(type);}
}

```
``` java
Community.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.Community;
import com.example.springboot_practice.repository.CommunityRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CommunityService {
    private final CommunityRepository communityRepository;

    public List<Community> getCommunityList(){
        return communityRepository.getCommunityList();
    }

    public Community getCommunityData(Long communityId){
        return communityRepository.getCommunityData(communityId);
    }

}

```
``` java
NoticeService.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.Notice;
import com.example.springboot_practice.repository.NoticeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class NoticeService {
    private final NoticeRepository noticeRepository;

    public List<Notice> getNoticeList(){
        return noticeRepository.getNoticeList();
    }
    public Notice getNoticeData(Long noticeId){
        return noticeRepository.getNoticeData(noticeId);
    }
}

```
``` java
UserService.java

package com.example.springboot_practice.service;

import com.example.springboot_practice.domain.User;
import com.example.springboot_practice.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;

    public List<User> getList() {
        return userRepository.getList();
    }

    public User getData(Long userId) {
        return userRepository.getData(userId);
    }
}

```
## dto:
```java
UserBoardDataReponseDto.java

package com.example.springboot_practice.dto;
import com.example.springboot_practice.domain.Board;
import lombok.Data;

import java.util.List;


@Data
public class UserBoardDataResponseDto {
    //Controller로 보낼 양식:
    private Long userId;
    private String name;
    private int age;
    private Long address;
    private List<Board> boardData;
}

```

## Controller:
```java
ApiController.java

package com.example.springboot_practice.controller;

import com.example.springboot_practice.domain.*;
import com.example.springboot_practice.dto.UserBoardDataResponseDto;
import com.example.springboot_practice.service.*;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;


@RestController
@RequiredArgsConstructor
public class ApiController {
    private final ApiService apiService;
    private final UserService userService;
    private final BoardService boardService;
    private final AddressService addressService;
    private final NoticeService noticeService;
    private final CommunityService communityService;

    @GetMapping("/api/userBoardData")
    public UserBoardDataResponseDto getUserBoardData(@RequestParam Long userId) {
        return apiService.getUserBoardData(userId);  //apiService에서 dto를 return한다.
    }

    @GetMapping("/api/user/{userId}")
    public User getUserData(@PathVariable Long userId) {
        return userService.getData(userId);
    }

    @GetMapping("/api/board/id/{boardId}")
    public Board getBoardData(@PathVariable Long boardId) {
        return boardService.getBoardData(boardId);
    }

    @GetMapping("/api/board")
    public List<Board> getList() {
        return boardService.getList();
    }

    @GetMapping("/api/user")
    public List<User> getUserList() {
        return userService.getList();
    }

    @GetMapping("/api/address")
    public List<Address> getAddressList() {
        return addressService.getAddressList();
    }

    @GetMapping("/api/address/{userId}")
    public Address getAddress(@PathVariable Long userId) {
        return addressService.getAddress(userId);
    }

    @GetMapping("/api/board/type/{type}")
    public List<Board> getBoardListByType(@PathVariable String type) {
        return boardService.getListByType(type);
    }

    @GetMapping("/api/notice")
    public List<Notice> getNoticeList() {
        return noticeService.getNoticeList();
    }

    @GetMapping("/api/notice/{noticeId}")
    public Notice getNoticeData(@PathVariable Long noticeId) {
        return noticeService.getNoticeData(noticeId);
    }

    @GetMapping("/api/community")
    public List<Community> getCommunityList(){
        return communityService.getCommunityList();
    }

    @GetMapping("/api/community/{communityId}")
    public Community getCommunityData(@PathVariable Long communityId){ return communityService.getCommunityData(communityId);}

}
```
