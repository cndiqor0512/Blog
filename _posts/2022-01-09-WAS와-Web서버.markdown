---
layout: post
title:  "WAS와 Web서버"
date:  2022-01-09 14:33:03
categories: programming
---

## WAS와 Web Server
#### Web server의 사전적 개념: 웹 브라우저와 같은 클라이언트로부터 HTTP 요청을 받고, HTML 문서 등을 통해 웹 페이지를 반환하는 컴퓨터 프로그램과 그러한 서버가 설치되어 있는 하드웨어(컴퓨터).
Web server는 HTTP를 통해 웹 브라우저에 HTML 문서, CSS, 오브젝트(이미지 파일 등) 등을 전송하는 프로그램이다. 이러한 프로세스를 그림으로 표현하면 다음과 같게 된다.

<img src="https://cndiqor0512.github.io/img/웹서버.png">

이처럼 Web server는 페이지의 요청에 어떤 사용자가 오든 정적인 페이지(Static page)를 반환한다. 

그렇다면 WAS에 대해서도 알아보자.
#### WAS의 사전적 개념: (Web application server), 웹 어플리케이션과 서버 환경을 만들어 동작을 시키는 기능을 제공하는 소프트웨어 프레임워크이다. 인터넷 상에서 HTTP를 통해 사용자 컴퓨터나 장치에애플리케이션을 수행해 주는 미들웨어 (소프트웨어 엔진)로 볼 수 있다.

WAS는 웹 서버에 웹 컨테이너를 합친 개념이라고 보면 된다. 웹 컨테이너란, 정적인 페이지만을 보낼 수 있는 웹 서버에 동적으로 처리해야할 부분을 처리하고 정적인 페이지로 변환하여 웹 서버에 보내는 소프트웨어이다. WAS가 웹 컨테이너를 포함하고 있기 때문에 정적인 페이지만을 반환할 수 있었던 웹 서버가 WAS에선 동적인 동작을 정적인 페이지로 변환해 웹 서버로 전달하여, 클라이언트에게 결과적으로 동적인 서비스를 제공할 수 있게 되는 것이다. 
WAS의 프로세스를 그림으로 표현하면 다음과 같게 된다.

<img src="https://cndiqor0512.github.io/img/WAS.png">
전의 그림과 다르게 DB와 WAS에서 동적인 프로세스를 처리하는 것을 알 수 있다.
이러한 WAS에 해당되는 대표적인 소프트웨어는 TOMCAT이 있다.

읽은 내용만 보면 WAS가 Web server보다 범용성이 넓을 것 같은데, WAS만 쓰면 안될까 하는 물음이 있을 것이다. 그러나 실제로는 WAS와 Web server를 동시에 사용하는 경우가 많다. 그 이유로는

 1. 기능의 분리로 서버의 부하 방지
 2. 보안 강화
 3. 여러 대의 WAS를 연결

등의 이유가 있다. 
